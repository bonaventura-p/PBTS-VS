
score.data %>%
  dplyr::select(.,dplyr::matches("^PR")) %>%
  TAM::tam(.) %>%
  TAM::IRT.informationCurves(.) -> read_info

#[1]
# Se_curve
#[2]
#test_info_curve
#[3]
# info_curves_item

#[4]
#info_curves_categories


Pr <- function(theta,xsi, B) {
  #2PL
  e <- exp(B*(theta-xsi))
  e/(1+e)
}

#information function of theta
Itheta <- function(theta=theta, xsi=0, B=1) {
  
  pi <- Pr(theta=theta, xsi,B)
  B^2 * (pi)^2 * (1-pi) / (pi)
}

#information function of xsi
Ixsi <- function(theta=0, xsi=0, B=1) {
  pi <- Pr(theta=theta, xsi,B)
  (B*pi)^2*(1-pi)/pi
}

#tst informaiton function from eRm
tI<- test_info(fit, theta=seq(-4,4,0.01)) %>% as.data.frame
se<- 1/(sqrt(tI)) #get the standard error

#ggplot of Information over range
g1 <- ggplot_gtable(ggplot_build(p1))
g2 <- ggplot_gtable(ggplot_build(p2))

# overlap the panel of 2nd plot on that of 1st plot
pp <- c(subset(g1$layout, name == "panel", se = t:r))
g <- gtable_add_grob(g1, g2$grobs[[which(g2$layout$name == "panel")]], pp$t,
                     pp$l, pp$b, pp$l)
grid.draw(g)


#Item response function is geom_line prob vs theta


#Item information function geom_line

lapply(domains, function(domn) {
  
  
  
})



#Table summary
summary.input <- shiny::reactive({  
  
  if ( !(input$dodif) ) {
    diff.output() %>%
      dplyr::full_join(.,fit.output(),by="item")%>%
      dplyr::select(.,dplyr::matches("item|zdif|w.mnsq")) %>%
      dplyr::mutate(.,irtdif=substr(item,11,14),item=substr(item,1,9)) %>%
      spread_n(.,key = irtdif, value =c("zdif","w.mnsq")) %>%
      dplyr::full_join(.,ptbis.output(),by="item") 
  } else if (input$dodif) {
    diff.output() %>%
      dplyr::full_join(.,fit.output(),by="item")%>%
      dplyr::select(.,dplyr::matches("item|zdif|w.mnsq")) %>%
      dplyr::mutate(.,irtdif=substr(item,11,14),item=substr(item,1,9)) %>%
      spread_n(.,key = irtdif, value =c("zdif","w.mnsq")) %>%
      dplyr::full_join(.,ptbis.output(),by="item") %>%
      dplyr::full_join(.,dif.output(),by="item")
    
  }
})


output[[paste('summary',domn,sep ="_")]] <- shiny::renderTable({
  
  
  if ( !(input$dodif)) {
    
    summary.input() %>%
      dplyr::filter(.,!(crit.one ==0 & crit.two==0 & crit.three == 0 
                        & Cat1_zdif==0 & Cat2_zdif==0 & Cat1_w.mnsq ==0 & Cat2_w.mnsq ==0)) %>%
      dplyr::mutate_at(., dplyr::vars("crit.one"), dplyr::funs(ifelse(.== 1, "Non-negative Category 0",NA))) %>%
      dplyr::mutate_at(., dplyr::vars("crit.two"),dplyr::funs(ifelse(.== 1, "Not ordered pt-biserial correlation",NA))) %>%
      dplyr::mutate_at(., dplyr::vars("crit.three"),dplyr::funs(ifelse(.== 1,"Low discrimination",NA))) %>%
      dplyr::mutate_at(.,dplyr::vars("Cat1_zdif"),dplyr::funs(ifelse(.==1,"Higher difficulty",ifelse(.==-1,"Lower difficulty",NA)))) %>% 
      dplyr::mutate_at(.,dplyr::vars("Cat2_zdif"),dplyr::funs(ifelse(.==1,"Higher difficulty",ifelse(.==-1,"Lower difficulty",NA)))) %>%
      dplyr::mutate_at(.,dplyr::vars("Cat1_w.mnsq"),dplyr::funs(ifelse(.==1,"MNSQ > 1.2 ",ifelse(.==-1,"MNSQ < 0.8 ",NA)))) %>%
      dplyr::mutate_at(.,dplyr::vars("Cat2_w.mnsq"),dplyr::funs(ifelse(.==1,"MNSQ > 1.2 ",ifelse(.==-1,"MNSQ < 0.8 ",NA)))) %>%
      dplyr::select(.,item,crit.one,crit.two, crit.three, Cat1_zdif, Cat2_zdif, Cat1_w.mnsq, Cat2_w.mnsq) %>% ##reorder
      dplyr::rename(., 'PtBis #1'= crit.one,
                    'PtBis #2'= crit.two,'PtBis #3'= crit.three,
                    Item=item, 'IRT difficulty Cat 1' = Cat1_zdif, 
                    'IRT difficulty Cat 2' = Cat2_zdif,
                    'Infit Cat 1' = Cat1_w.mnsq,
                    'Infit Cat 2' = Cat2_w.mnsq)  %>%
      head(.,n=input$sum)
    
  } else  if(input$dodif) {
    
    summary.input() %>%
      dplyr::filter(.,!(crit.one ==0 & crit.two==0 & crit.three == 0 
                        & Cat1_zdif==0 & Cat2_zdif==0 & Cat1_w.mnsq ==0 & Cat2_w.mnsq ==0 & gdif==0)) %>%
      dplyr::mutate_at(., dplyr::vars("crit.one"), dplyr::funs(ifelse(.== 1, "Non-negative Category 0",NA))) %>%
      dplyr::mutate_at(., dplyr::vars("crit.two"),dplyr::funs(ifelse(.== 1, "Not ordered pt-biserial correlation",NA))) %>%
      dplyr::mutate_at(., dplyr::vars("crit.three"),dplyr::funs(ifelse(.== 1,"Low discrimination",NA))) %>%
      dplyr::mutate_at(.,dplyr::vars("Cat1_zdif"),dplyr::funs(ifelse(.==1,"Higher difficulty",ifelse(.==-1,"Lower difficulty",NA)))) %>% 
      dplyr::mutate_at(.,dplyr::vars("Cat2_zdif"),dplyr::funs(ifelse(.==1,"Higher difficulty",ifelse(.==-1,"Lower difficulty",NA)))) %>%
      dplyr::mutate_at(.,dplyr::vars("Cat1_w.mnsq"),dplyr::funs(ifelse(.==1,"MNSQ > 1.2 ",ifelse(.==-1,"MNSQ < 0.8 ",NA)))) %>%
      dplyr::mutate_at(.,dplyr::vars("Cat2_w.mnsq"),dplyr::funs(ifelse(.==1,"MNSQ > 1.2 ",ifelse(.==-1,"MNSQ < 0.8 ",NA)))) %>%
      dplyr::mutate_at(.,dplyr::vars("gdif"),dplyr::funs(ifelse(.>0,"Boys > Girls","Girls > Boys"))) %>%
      dplyr::select(.,item,crit.one,crit.two, crit.three, Cat1_zdif, Cat2_zdif, Cat1_w.mnsq, Cat2_w.mnsq,gdif) %>% ##reorder
      dplyr::rename(., 'PtBis #1'= crit.one,
                    'PtBis #2'= crit.two,'PtBis #3'= crit.three,
                    "Item"=item, 'IRT difficulty Cat 1' = Cat1_zdif, 
                    'IRT difficulty Cat 2' = Cat2_zdif,
                    'Infit Cat 1' = Cat1_w.mnsq,
                    'Infit Cat 2' = Cat2_w.mnsq,
                    "Gender DIF"=gdif)  %>%
      head(.,n=input$sum)
    
  }
  
})
