
#fit.output
fit.output1<- shiny::reactive({ 
  results()[[input$domain10]]["fit.output"] %>%
    as.data.frame(.) %>%  
    Infit(tam.fit = .)
})
#ptbis.output
ptbis.output1<- shiny::reactive({ 
  results()[[input$domain10]]["ctt.output"] %>% 
    as.data.frame(.) -> ctt.output
  
  results()[[input$domain10]]["discr.output"] %>% 
    as.data.frame(.) -> discr.output       
  
  PtBis(ctt.data = ctt.output, discr.data = discr.output) %>%
    return(.) 
})

#diff 

intl.diff1 <- shiny::reactive({
  IntlPars(input$domain10,"diff")
})

diff.output1<- shiny::reactive({ 
  results()[[input$domain10]]["tam.output"] %>% 
    as.data.frame(.) %>%
    DiffItem(tam.mod = .,intl.tam = intl.diff()) 
})

#dif gender
dif.output1<- shiny::reactive({ 
  results()[[input$domain10]]["dif.output"] %>% 
    as.data.frame(.) %>%
    DIFitem(DIF.mod = .)
})


#kill.item definition
kill.item1 <- shiny::reactive({  
  
  if ( !(input$dodif) ) {
    diff.output1() %>%
      dplyr::full_join(.,fit.output1(),by="item")%>%
      dplyr::mutate(.,irtdif=substr(item,11,14),item=substr(item,1,9)) %>%
      spread_n(.,key = irtdif, value =c("zdif","w.mnsq")) %>%
      dplyr::full_join(.,ptbis.output1(),by="item") %>%
      dplyr::filter(.,!(crit.one ==0 & crit.two==0 & crit.three == 0 
                        & Cat1_zdif==0 & Cat2_zdif==0 & Cat1_w.mnsq ==0 & Cat2_w.mnsq ==0)) %>%
      dplyr::select(.,item) %>%
      unique(.) %>%
      unlist(., use.names=FALSE)
    
  } else if (input$dodif) {
    diff.output1() %>%
      dplyr::full_join(.,fit.output1(),by="item")%>%
      dplyr::mutate(.,irtdif=substr(item,11,14),item=substr(item,1,9)) %>%
      spread_n(.,key = irtdif, value =c("zdif","w.mnsq")) %>%
      dplyr::full_join(.,ptbis.output1(),by="item") %>%
      dplyr::full_join(.,dif.output1(),by="item") %>%
      dplyr::filter(.,!(crit.one ==0 & crit.two==0 & crit.three == 0 
                        & Cat1_zdif==0 & Cat2_zdif==0 & Cat1_w.mnsq ==0 & Cat2_w.mnsq ==0 & gdif==0)) %>%
      dplyr::select(.,item)%>%
      unique(.) %>%
      unlist(., use.names=FALSE)
  }
})  


output$killitem.ui<-shiny::renderUI({
  shiny::checkboxGroupInput("kill", "Tick to delete the item:", inline=TRUE,
                            choices = kill.item1())
})

info.output1 <- shiny::reactive({
  results()[[input$domain10]]["info.output"]  %>%
    as.data.frame(.)
})


output$plot10 <- shiny::renderPlot({
  
  #test information curve
  data.frame(theta=info.output1()$info.output.theta, 
             info.test=info.output1()$info.output.test_info_curve,
             se.curve=info.output1()$info.output.se_curve,row.names = NULL) %>%
    ggplot(., aes(y=info.test,x=theta)) +
    geom_line(color=pbts_cols("oecdblue"),size=1) +
    geom_line(aes(y=se.curve,x=theta), color = pbts_cols("red"), linetype= "dashed")+
    labs(y="Probability of theta", title ="Test information curve")+
    theme_gray()+
    theme(legend.position="top", legend.title=element_blank(),
          legend.background = element_rect(fill="#EBEBEB"),
          plot.subtitle=element_text(face="italic")) -> tic.plot
  
  #test characteristic curve
  data.frame(theta=info.output1()$info.output.theta, 
             Prtest=PrTest(xsi=diff.output1()$tam.value.nat,theta=info.output1()$info.output.theta),row.names = NULL) %>%
    ggplot(., aes(y= Prtest, x=theta)) +
    geom_line(color=pbts_cols("orange"),size=1)+
    labs(y="Probability of theta", title ="Test characteristic curve")+
    theme_gray()+
    theme(legend.position="top", legend.title=element_blank(),
          legend.background = element_rect(fill="#EBEBEB"),
          plot.subtitle=element_text(face="italic")) -> tcc.plot
  
  # #plots together
  gridExtra::grid.arrange( tcc.plot , tic.plot,   ncol=2, nrow=1,widths = c(0.8,1))
  
})