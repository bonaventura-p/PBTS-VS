
########################
########## SERVER ###############
###########################





server2 <- function(input,output){
  
  
  # download report
  output$downloadReport <- downloadHandler(
    filename = function() {
      paste('my-report', sep = '.', switch(
        input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
      ))
    },
    
    content = function(file) {
      src <- normalizePath('report.Rmd')
      owd <- setwd(tempdir())
      on.exit(setwd(owd))
      file.copy(src, 'report.Rmd')
      
      out <- render('report.Rmd', switch(
        input$format,
        PDF = pdf_document(), HTML = html_document(), Word = word_document()
      ))
      file.rename(out, file)
    })

  #################
  #Load data
  ##################


  # load national data sets
  folderInput <- reactive({
    switch(input$folder,
           "Andorra" = "V:/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Data/Andorra/")
  })

  score.data <- reactive({
    read.table( paste0(folderInput(), "score.data.txt"), header=T, sep="\t")
  }) 

  gold.data <- reactive({
    read.table( paste0(folderInput(), "gold.data.txt"), header=T, sep="\t")
  })   
  
  raw.data <- reactive({
    read.table( paste0(folderInput(), "raw.data.txt"), header=T, sep="\t")
  })   
  
  pca.data <- reactive({
    read.table( paste0(folderInput(), "pca.data.txt"), header=T, sep="\t")
  })   
  
 #####################
 #run all analysis
 #####################
  
  domains<-c("math","read","scie") 
  
  #Validation study analysis
  results<-reactive({
    VSscaleloop(domains=domains, resp=score.data(), dodif=input$dodif, gender.data=gold.data(), gender.name="ST004Q01_15")
  })
  
  #Primary analysis
  primary<-reactive({
    PFSscaleloop(domains=domains, resp = score.data(), stu.data = gold.data(), 
                 raw.data = raw.data(), pca.data = pca.data(),kill.item=input$kill)
  })

#############
# Create tables
#############
  
   lapply(domains, function(domn) {
     
  
     
     #Table 2. Correlation between score frequencies 0,1,2 pilot 
     intl.freq <- IntlFreq(domn)

      corr.output<- reactive({ 
         results()[[domn]]["ctt.output"] %>% 
        as.data.frame(.) %>%  
        Correl(ctt.data=.,intl.ctt = intl.freq)
        })
     
     output[[paste('table2',domn,sep ="_")]] <- renderTable({
       
       corr.output() %>% 
         dplyr::rename(., "Item category"=item.freq, Correlation=corr.value) 
       })  
  
  #Table 3 Dodgy items based on biserial-point values 
      ptbis.output<- reactive({ 
        results()[[domn]]["ctt.output"] %>% 
          as.data.frame(.) %>%
          PtBis(ctt.data = .) 
      })
    
  
      output[[paste('table3',domn,sep ="_")]]<-renderTable({
        
        ptbis.output() %>%
          dplyr::filter(.,!(crit.one ==0 & crit.two==0 & crit.three == 0))  %>%
          dplyr::mutate_at(., dplyr::vars("crit.one"), dplyr::funs(ifelse(.== 1, "Non-negative Category 0","0"))) %>%
          dplyr::mutate_at(., dplyr::vars("crit.two"),dplyr::funs(ifelse(.== 1, "Not ordered pt-biserial correlation","0"))) %>%
          dplyr::mutate_at(., dplyr::vars("crit.three"),dplyr::funs(ifelse(.== 1, "Low Discrimination","0"))) %>%
          dplyr::rename(., "Discrimination index" = discr, 'Criterion 1'= crit.one,
                 'Criterion 2'= crit.two,
                 'Criterion 3'= crit.three) %>%
        head(., n=input$obs3)
      })
  
  
      # Table 4. Dodgy items based on difficulty differences
      intl.diff <- IntlDiff(domn)
      
      diff.output<- reactive({ 
        results()[[domn]]["tam.output"] %>% 
        as.data.frame(.) %>%
        DiffItem(tam.mod = .,intl.tam = intl.diff) 
      })
      
      
      output[[paste('table4',domn,sep ="_")]]<-renderTable({
        
        diff.output() %>%
          dplyr::filter(.,!(zdif==0)) %>%
          dplyr::select(.,-zdif) %>%
          dplyr::rename(., Item=item, 'National beta' = tam.value.x, "International beta" = tam.value.y) %>%
          head(., n=input$obs4)
      })
      
      #Table 5. Dodgy items based on coefficient MNSQ
      fit.output<- reactive({ 
        results()[[domn]]["fit.output"] %>%
          as.data.frame(.) %>%  
          Infit(tam.fit = .)
      })
      
      output[[paste('table5',domn,sep ="_")]]<-renderTable({ 
  
      fit.output() %>%  
          dplyr::filter(., !(w.mnsq==0)) %>%
          dplyr::select(.,-w.mnsq) %>%
      head(., n=input$obs5)
      })
  
    #Table 6. Dodgy items based on DIF criterion
      dif.output<- reactive({ 
        results()[[domn]]["dif.output"] %>% 
          as.data.frame(.) %>%
          DIFitem(DIF.mod = .)
        })
      
      output[[paste('table6',domn,sep ="_")]]<-renderTable({ 
        
      dif.output() %>% 
          dplyr::filter(., !(gdif==0)) %>%
          dplyr::select(.,-gdif) %>%
          dplyr::rename(., Girls = `1`, Boys = `2`) %>%
       head(., n=input$obs6)
      })
    
  
  #Table summary
      summary.input <- reactive({  
        
        if ( !(input$dodif) ) {
          diff.output() %>%
            dplyr::full_join(.,fit.output(),by="item")%>%
            dplyr::select(.,dplyr::matches("item|zdif|w.mnsq")) %>%
            dplyr::mutate(.,irtdif=substr(item,11,14),item=substr(item,1,9)) %>%
            spread_n(.,key = irtdif, value =c("zdif","w.mnsq")) %>%
            dplyr::full_join(.,ptbis.output(),by="item") 
        } else if (input$dodif) {
           diff.output() %>%
            dplyr::full_join(.,fit.output(),by="item")%>%
            dplyr::select(.,matches("item|zdif|w.mnsq")) %>%
            dplyr::mutate(.,irtdif=substr(item,11,14),item=substr(item,1,9)) %>%
             spread_n(.,key = irtdif, value =c("zdif","w.mnsq")) %>%
            dplyr::full_join(.,ptbis.output(),by="item") %>%
            dplyr::full_join(.,dif.output(),by="item")
             
         }
      })


    output[[paste('summary',domn,sep ="_")]] <- renderTable({
      
      
      if ( !(input$dodif)) {
        
       summary.input() %>%
          dplyr::filter(.,!(crit.one ==0 & crit.two==0 & crit.three == 0 
                    & Cat1_zdif==0 & Cat2_zdif==0 & Cat1_w.mnsq ==0 & Cat2_w.mnsq ==0)) %>%
          dplyr::mutate_at(., dplyr::vars("crit.one"), dplyr::funs(ifelse(.== 1, "Non-negative Category 0",NA))) %>%
          dplyr::mutate_at(., dplyr::vars("crit.two"),dplyr::funs(ifelse(.== 1, "Not ordered pt-biserial correlation",NA))) %>%
          dplyr::mutate_at(., dplyr::vars("crit.three"),dplyr::funs(ifelse(.== 1,"Low discrimination",NA))) %>%
          dplyr::mutate_at(.,dplyr::vars("Cat1_zdif"),dplyr::funs(ifelse(.==1,"Higher difficulty",ifelse(.==-1,"Lower difficulty",NA)))) %>% 
          dplyr::mutate_at(.,dplyr::vars("Cat2_zdif"),dplyr::funs(ifelse(.==1,"Higher difficulty",ifelse(.==-1,"Lower difficulty",NA)))) %>%
          dplyr::mutate_at(.,dplyr::vars("Cat1_w.mnsq"),dplyr::funs(ifelse(.==1,"MNSQ > 1.2 ",ifelse(.==-1,"MNSQ < 0.8 ",NA)))) %>%
          dplyr::mutate_at(.,dplyr::vars("Cat2_w.mnsq"),dplyr::funs(ifelse(.==1,"MNSQ > 1.2 ",ifelse(.==-1,"MNSQ < 0.8 ",NA)))) %>%
          dplyr::select(.,item,crit.one,crit.two, crit.three, Cat1_zdif, Cat2_zdif, Cat1_w.mnsq, Cat2_w.mnsq) %>% ##reorder
          dplyr::rename(., 'PtBis #1'= crit.one,
                'PtBis #2'= crit.two,'PtBis #3'= crit.three,
                Item=item, 'IRT difficulty Cat 1' = Cat1_zdif, 
                'IRT difficulty Cat 2' = Cat2_zdif,
                'Infit Cat 1' = Cat1_w.mnsq,
                'Infit Cat 2' = Cat2_w.mnsq)  %>%
        head(.,n=input$sum)
        
      } else  if(input$dodif) {
        
        summary.input() %>%
          dplyr::filter(.,!(crit.one ==0 & crit.two==0 & crit.three == 0 
                     & Cat1_zdif==0 & Cat2_zdif==0 & Cat1_w.mnsq ==0 & Cat2_w.mnsq ==0 & gdif==0)) %>%
          dplyr::mutate_at(., dplyr::vars("crit.one"), dplyr::funs(ifelse(.== 1, "Non-negative Category 0",NA))) %>%
          dplyr::mutate_at(., dplyr::vars("crit.two"),dplyr::funs(ifelse(.== 1, "Not ordered pt-biserial correlation",NA))) %>%
          dplyr::mutate_at(., dplyr::vars("crit.three"),dplyr::funs(ifelse(.== 1,"Low discrimination",NA))) %>%
          dplyr::mutate_at(.,dplyr::vars("Cat1_zdif"),dplyr::funs(ifelse(.==1,"Higher difficulty",ifelse(.==-1,"Lower difficulty",NA)))) %>% 
          dplyr::mutate_at(.,dplyr::vars("Cat2_zdif"),dplyr::funs(ifelse(.==1,"Higher difficulty",ifelse(.==-1,"Lower difficulty",NA)))) %>%
          dplyr::mutate_at(.,dplyr::vars("Cat1_w.mnsq"),dplyr::funs(ifelse(.==1,"MNSQ > 1.2 ",ifelse(.==-1,"MNSQ < 0.8 ",NA)))) %>%
          dplyr::mutate_at(.,dplyr::vars("Cat2_w.mnsq"),dplyr::funs(ifelse(.==1,"MNSQ > 1.2 ",ifelse(.==-1,"MNSQ < 0.8 ",NA)))) %>%
          dplyr::mutate_at(.,dplyr::vars("gdif"),dplyr::funs(ifelse(.>0,"Boys > Girls","Girls > Boys"))) %>%
          dplyr::select(.,item,crit.one,crit.two, crit.three, Cat1_zdif, Cat2_zdif, Cat1_w.mnsq, Cat2_w.mnsq,gdif) %>% ##reorder
          dplyr::rename(., 'PtBis #1'= crit.one,
                 'PtBis #2'= crit.two,'PtBis #3'= crit.three,
                 "Item"=item, 'IRT difficulty Cat 1' = Cat1_zdif, 
                 'IRT difficulty Cat 2' = Cat2_zdif,
                 'Infit Cat 1' = Cat1_w.mnsq,
                 'Infit Cat 2' = Cat2_w.mnsq,
                 "Gender DIF"=gdif)  %>%
          head(.,n=input$sum)
        
      }
        
     })
    
    
   
  })
  
############### 
#Create figures
############
  

    # Figure 2: CTT Difficulty comparison
  intlfig.freq <- reactive({
    IntlFreq(input$domain2)
  })
  
  corrfig.output<- reactive({ 
    results()[[input$domain2]]["ctt.output"] %>% 
      as.data.frame(.) %>%  
      CorrFig(ctt.data=.,intl.ctt = intlfig.freq())
  })
  
  output$plot2 <- renderPlot({
    
    corrfig.output() %>% 
      ggplot(., aes(x=`1.x`, y=`1.y`,label=.$item)) +
      geom_abline(slope=1,intercept = 0,color="lightgrey",size=0.5) +
      geom_smooth(method=lm, se=FALSE, col=pbts_cols("oecdblue"), size=1) +
      geom_text_repel(size=3,col=pbts_cols("oecdblue")) + #geom_text_repel not available in plotly
      scale_x_continuous(limits = c(0, 100)) +
      scale_y_continuous(limits = c(0, 100)) +
      labs(x="National sample",
           y="International sample",
           title ="CTT Difficulty comparison",
           subtitle = "Percentage of correct responses to the items in the national and international samples") +
      theme_gray() +
      theme(plot.subtitle=element_text(face="italic")) -> g2

    g2
    
  })
  
  
  #Figure 4: IRT Difficulty comparison
  intlfig.diff <-reactive({
    IntlDiff(input$domain4)
  }) 
  
  diff.fig.output<- reactive({ 
    results()[[input$domain4]]["tam.output"] %>% 
      as.data.frame(.) %>%
      DiffItem(tam.mod = .,intl.tam = intlfig.diff()) 
  })

  output$plot4 <- renderPlot({
    
    diff.fig.output() %>%
      dplyr::mutate(.,z2dif=ifelse(zdif==0,0,1)) %>%
      ggplot(., aes(x=tam.value.x, y=tam.value.y,label=ifelse(zdif != 0,item,""),color=factor(z2dif)))+
      geom_point(aes(size=ifelse(z2dif == 1,0.2,2)))+
      scale_size_identity()+
      geom_smooth(aes( group = 0), method=lm, col=pbts_cols("turquoise"), se=FALSE)+ 
      geom_abline(slope = 1, intercept = 0, color="lightgrey", size = 0.2)+
      geom_text_repel(aes(colour = factor(z2dif)),size=2.5) +
      scale_color_pbts(palette="RdGn",reverse=TRUE, labels=c("Unproblematic items", "Dodgy items"))+
      scale_x_continuous(limits = c(-3.5, 5.5))+
      scale_y_continuous(limits = c(-3.5, 5.5))+
      labs(x="National IRT beta parameter",
           y="International IRT beta parameter", 
           title ="IRT Difficulty comparison",
           subtitle = "Estimated item difficulty in the national and international samples")+
      theme_gray()+
      theme(legend.position="top", legend.title=element_blank(),
            legend.background = element_rect(fill="#EBEBEB"),
            plot.subtitle=element_text(face="italic"))-> DiffPlot
    
    
    #plot density
    
    diff.fig.output() %>%
      dplyr::select(., tam.value.x, tam.value.y) %>%
      tidyr::gather(., tam.source, tam.value, factor_key=TRUE) %>%
      ggplot(., aes(tam.value, fill = tam.source)) + 
      geom_density(alpha=.5) + 
      scale_fill_pbts(palette="GyBe",reverse=TRUE, labels=c("National estimates", "International estimates"))+
      labs(x="IRT difficulty (beta parameter)", title ="IRT Difficulty distribution",
           subtitle = "Density distribution of estimated beta parameters in national and international samples")+
      theme_gray()+
      theme(legend.position="top", legend.title=element_blank(),
            legend.background = element_rect(fill="#EBEBEB"),
            plot.subtitle=element_text(face="italic")) -> DiffDensity
    
    #plots together
    gridExtra::grid.arrange( DiffPlot , DiffDensity,   ncol=2, nrow=1,widths = c(1, 0.6))
  })
  
  
  #Figure 6: Gender DIF
  dif.fig.output<- reactive({ 
    results()[[input$domain6]]["dif.output"] %>% 
      as.data.frame(.) %>%
      DIFitem(DIF.mod = .)
  })

    output$plot6 <-renderPlot({
      
      dif.fig.output() %>%
        tidyr::gather(., key=gender, value=dif.value, `1`:`2`, factor_key=TRUE) %>%
        ggplot(., aes(x=item, y=dif.value, group=gender)) +
        geom_line(aes(color = gender))+
        geom_point(aes(color = gender,shape=ifelse(gdif==0,1,16)),size=3)+
        labs(y="IRT difficulty (beta parameter)", title ="Gender DIF",
             subtitle = "IRT difficulty estimates for boys and girls (significant values with filled dot)")+
        scale_color_pbts(palette="GnBe", labels=c("Girls", "Boys"))+
        scale_shape_identity()+
        theme_gray()+
        theme(axis.text.x = element_text(angle = 90), 
              axis.title.x = element_blank(),
              legend.position="top",
              legend.title=element_blank(),
              legend.background = element_rect(fill="#EBEBEB"),
              plot.subtitle=element_text(face="italic"))
    })
    
# Figure 7: Wright Map
  
  fig.wright.nested<-reactive({
    results()[[input$domain7]]["wright.output"]
  })
  
  fig.wright<-reactive({
    fig.wright.nested()[["wright.output"]] %>%
      WrightmapElms(.)
  })
    
    output$table8<-renderTable({
      fig.wright() %>%
        head(.)
    })
    
    output$plot7 <-renderPlot({

      fig.wright()[[2]] %>%
        ggplot(., aes(x = theta)) +
        geom_histogram(aes(y=..density..), binwidth = 0.3, fill = pbts_cols("dustygrey"), col="black", na.rm = TRUE) +
        geom_density(alpha=.2, fill=pbts_cols("lightblue")) +
        xlim(fig.wright()[[3]], fig.wright()[[4]]) +
        coord_flip() + 
        scale_y_reverse() +
        xlab("Student ability") +
        theme_gray()+
        theme(axis.title.x = element_blank(),
              axis.text.x = element_blank(),
              axis.ticks.x = element_blank()) -> theta.density
      
      
      fig.wright()[[1]] %>%
        ggplot(., aes(x=item, y=tam.value, label=item)) + 
        geom_point(color = pbts_cols("dustygrey"), shape=18, size=3)+
        scale_y_continuous(position = "right",limits=c(fig.wright()[[3]], fig.wright()[[4]]))+
        geom_text_repel(col=pbts_cols("dustygrey"),size=2.5)+
        theme_gray()+
        theme(axis.title.x = element_blank(),
              axis.text.x=element_blank(), 
              axis.ticks.x=element_blank())+
        ylab("Item difficulty")-> beta.plot
      
      #plot_grid(theta.density, beta.plot)
      gridExtra::grid.arrange( theta.density , beta.plot,   ncol=2, nrow=1,widths = c(1, 1),top="Wright Map")

    })
 
      #Figure 8 primary analysis 
    kill.item<-reactive({
      if(input$domain8=="math") {
        score.data() %>%
          dplyr::select(., dplyr::matches("^PM")) %>%
          names(.)
      } else if(input$domain8=="read") {
        score.data() %>%
          dplyr::select(., dplyr::matches("^PR")) %>%
          names(.)
      } else if(input$domain8=="scie") {
        score.data() %>%
          dplyr::select(., dplyr::matches("^PS")) %>%
          names(.)
      } 
    
    })
    
    output$killitem.ui<-renderUI({
      checkboxGroupInput("kill", "Tick to delete the item:", inline=TRUE,
                         choices = kill.item())
    })
    

    
      primary.output<- reactive({ 
        primary()[[input$domain8]] %>% 
          as.data.frame(.) %>%
          intsvy::pisa.mean.pv(pvlabel=toupper(input$domain8), by = "stidsch",data =.) 
      })
      
      
      output$plot8<- renderPlot({
        
        primary.output() %>% 
          ggplot(., aes(y = Mean, x = stidsch),fill=variable) + 
          geom_bar(stat="identity",width=0.2, alpha=.4, fill=pbts_cols("lightblue"))+  
          labs(y="PISA scale", x="School ID", title ="Performance of students across schools",
               subtitle = "Average performance of students in each schools")+
          scale_y_continuous(limits=c(200, 600),oob = rescale_none)+
          theme_gray()+
          theme(axis.text.x = element_text(angle = 90), 
                legend.position="top",
                legend.title=element_blank(),
                legend.background = element_rect(fill="#EBEBEB"),
                plot.subtitle=element_text(face="italic"))-> g8
        
        g8
        
      })
    

}

shinyApp(ui = ui2, server = server2)




# Render a renderTable or renderDataTable within an application page. renderTable uses a standard HTML table, 
# while renderDataTable uses the DataTables Javascript library to create an interactive table with more features.
