#clear environment
rm(list=ls())


#Use plot.ly to make a ggplot interactive

#packages
library("rmarkdown")
library("fastDummies")
library("xlsx")
library("plyr")
library("dplyr")
library("magrittr")
library("TAM")
library("openxlsx") #for big excel files
library("broom")
library("zoo")
library("intsvy")
library("data.table")
library("ggplot2")
library("plotly")
library("shiny")
library("shinydashboard")
library(reshape2)


#setting working directory
dirPisaForSchools2017<-'V:\\Pacileo_B\\NOBACKUP\\PISA PM\\PFS'

setwd(dirPisaForSchools2017)
getwd()



###############################
####### 

dat<-readRDS('graphdat2.rds')

ui <-fluidPage(
  titlePanel("PISA-Based Test for Schools"),
  
  sidebarPanel( 
    uiOutput('ui_schid'),
    HTML('</br>'),
    uiOutput('ui_domn'),
    HTML('</br>'),
    uiOutput('ui_group')
  ),
  
  mainPanel(
    tabsetPanel(type = "tabs", 
                
                tabPanel("Data",
                         # dataTableOutput('table1'),
                         dataTableOutput('table2')
                ),
                
                tabPanel("Summary Statistics",
                         plotlyOutput("plot1", height = 250)  
                )
    )
  )
)

server <- function(input,output){
  
  # Create a new input element with the unique values of the selected column
  output$ui_schid <- renderUI({
    selectizeInput(inputId = 'val',label=h5('School ID'),unique(dat$stidsch),multiple=T) #F to show only one school
  })
  
  # If both input is not null, filter the table
  output$table <- renderDataTable({
    if(!is.null(input$val))
    {
      dat %<>% filter(.,stidsch %in% input$val)
    }
    dat
  })
  
  #create input element with domain choice
  output$ui_domn <- renderUI({
    selectizeInput(inputId = 'domn',label=h5('Domain'),choices=c("math","read","scie"),multiple=F)
  })
  
  #create input element with group choice
  output$ui_group <- renderUI({
    selectizeInput(inputId = 'group',label=h5('Group'),choices=c("All","Gender","ESCS"),multiple=T)
  })
  

  output$table2 <- renderDataTable({
    
    pisa.mean.pv(pvlabel=toupper(input$domn), by = "stidsch",data =dat) %>% 
    filter(.,stidsch %in% input$val) %>%
      {.}->SchMean
    
  })
  
  output$plot1<- renderPlotly({
    
    pisa.mean.pv(pvlabel=toupper(input$domn), by = "stidsch",data =dat) %>% 
      filter(.,stidsch %in% input$val) %>%
      ggplot(., aes(y = Mean, x = stidsch),fill=variable) + 
            geom_bar(stat="identity",width=0.2, fill="lightseagreen")+  theme_grey() +
            scale_x_discrete(name = " ") +
            scale_y_continuous(name = " ")->g1
      
      g1<-ggplotly(g1)
      g1
     
      })
  
}

shinyApp(ui = ui, server = server)


















#########################################################

#load dat
dat<-readRDS("graphdat.rds")
#load school list
schlist<-paste("01_11",51:95,sep="")


# ui <- fluidPage(
#   textInput("caption", "Caption", "Data Summary"),
#   verbatimTextOutput("value")
# )
# server <- function(input, output) {
#   output$value <- renderText({ input$caption })
# }
# shinyApp(ui, server)



# pisa.mean.pv(pvlabel="READ", by = "stidsch",data =dat) %>% as.data.frame() %>%
#   filter(stidsch=="01_0151") %>%
#   select(Mean) %>%
#   {.}->SchMean2
# g1 <- ggplot(SchMean2, aes(x = Mean),fill=variable) + #fix y 
#   geom_bar(sta???t="identity",width=0.2, fill="lightseagreen")+  theme_grey() 
# g1 <- ggplotly(g1)
# g1

server <- function(input, output) {
  
  SchDS<-reactive({filter(dat,stidsch==as.name(input$schid))}) 
  
  
  # data view 
  output$view <- renderTable({
    head(SchDS(),n=10)
  })
  
  
  #   pisa.mean.pv(pvlabel=toupper(input$domn), by = "stidsch",data =dat) 
  #   #%>%      merge(y=.,x=input$group)
  #  #SchMean<-reactive({pisa.mean.pv(pvlabel=toupper(input$domn), by = "stidsch",data =dat)})    
  #  
  #   output$myplot1 <- renderPlotly({
  #     g1 <- ggplot(SchMean(), aes(y = Mean, x = x),fill=variable) + 
  #       geom_bar(stat="identity",width=0.2, fill="lightseagreen")+  theme_grey() +
  #       scale_x_discrete(name = " ") +
  #       scale_y_continuous(name = " ")
  #     g1 <- ggplotly(g1)
  #     g1
  # })
  #output$mean<-renderPrint({summary(SchMean())})
}


ui <- shinyUI(fluidPage(
  
  # Application title
  
  titlePanel("Bivariate Regression"),
  #dashboardHeader(title = "Basic dashboard"),
  # dashboardSidebar(
  #   sidebarMenu(
  #     menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
  #     menuItem("Widgets", tabName = "widgets", icon = icon("th"))
  #   )
  # ),
  sidebarLayout(
    
    sidebarPanel(      
      selectInput(inputId = "schid", label= h5('School ID'), choices = schlist)
    ),
    
    mainPanel(
      tabsetPanel(type = "tabs", 
                  
                  tabPanel("Data",
                           tableOutput("view")),
                  
                  tabPanel("Summary Statistics",
                           verbatimTextOutput("summary")  
                  )
      )
    )
  )
)
)

# dashboardBody(
#   tabItems(
#     # First tab content
#     tabItem(tabName = "dashboard",
#             
#             fluidRow(
#               box(
#                 title = "School ID",
#                 #textInput("mytext1", "Input goes here",value="Reading")),
#                 selectInput(inputId = "schid", label="", choices = schlist)),
#               
#               box(
#                 title = "Scales",
#                 #textInput("mytext1", "Input goes here",value="Reading")),
#                 selectInput(inputId = "domn", label="", choices = c("math", "read","scie"))),
#               
#               box(
#                 title = "Indicators",
#                 list(
#                   h4("Select the indicator:"),
#                   #All Boys Girls Top_ESCS Low_ESCS Low_performers Top_Performers
#                   selectInput(inputId = "group", label="", choices = c("ALL", "ESCS","GENDER"))
#                 ))
#               
#               
#               
#             ),
#             
#             fluidRow(
#               box(plotlyOutput("plot1", height = 250))#,
#             #  box(plotlyOutput("plot2", height = 250))
#               #verbatimTextOutput(outputId = "mean")
#             )
#       )#,
#       
#       # # Second tab content
#        #tabItem(tabName = "widgets",
#       #         h2("Widgets tab content")
#       # )
#     )
#   )
# )


shinyApp(ui, server)

#histdata <- rnorm(500)

# output$plot1 <- renderPlot({
#   dat <- mtcars[1:input$myslider,]
#   ggplot(dat, aes(mpg)) + geom_histogram(fill="cadetblue")
# })


# dat <- mtcars[1:input$myslider,]
#ggplot(dat, aes(mpg, wt)) + geom_point() + stat_smooth()



# ui <- fluidPage(
#   headerPanel("Regression and Time Series Analysis"), 
#   sidebarPanel(
#     p("Select the inputs for the Dependent Variable"),
#     selectInput(inputId = "DepVar", label = "Dependent Variables", multiple = FALSE, choices = list("AvgIR", "YYYYMM", "SumCount", "AvgLTV", "AvgGFEE", "AvgRTC", "Date")),
#     p("Select the inputs for the Independent Variable"),
#     selectInput(inputId = "IndVar", label = "Independent Variables", multiple = FALSE, choices = list( "SumCount", "AvgIR", "YYYYMM", "AvgLTV", "AvgGFEE", "AvgRTC", "Date"))
#   ),
#   mainPanel(
#     verbatimTextOutput(outputId = "RegSum"),
#     verbatimTextOutput(outputId = "IndPrint"),
#     verbatimTextOutput(outputId = "DepPrint")
#     #plotOutput("hist")
#   )
# )
# 
# server <- function(input, output) {
#   
#   lm1 <- reactive({lm(paste0(input$DepVar) ~ paste0(input$IndVar), data = RegData)})
#   
#   output$DepPrint <- renderPrint({input$DepVar})
#   output$IndPrint <- renderPrint({input$IndVar})
#   output$RegSum <- renderPrint({summary(lm1())})
#   
# }




# domnMean %<>%
#   select(.,stidsch,Mean,matches("s.e.")) %>%
#   setnames(c("stidsch",paste(input$domn,"score",sep='_'),paste(input$domn,"score_se",sep='_'))) %>%
#   {.}->SchoolPfmceDS
#   ggplot(dat, aes(mpg)) + geom_histogram(fill="cadetblue")





##########################################################
#download results


#in server

# download report
# output$downloadReport <- downloadHandler(
#   filename = function() {
#     paste('my-report', sep = '.', switch(
#       input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
#     ))
#   },
#   
#   content = function(file) {
#     src <- normalizePath('report.Rmd')
#     owd <- setwd(tempdir())
#     on.exit(setwd(owd))
#     file.copy(src, 'report.Rmd')
#     
#     library(rmarkdown)
#     out <- render('report.Rmd', switch(
#       input$format,
#       PDF = pdf_document(), HTML = html_document(), Word = word_document()
#     ))
#     file.rename(out, file)
#   })


#in ui
# Sidebar 

# sidebarLayout(
#   sidebarPanel(      
#    
#     radioButtons('format', h5('Document format'), c('PDF', 'HTML', 'Word'), inline = TRUE),
#     downloadButton('downloadReport'),
#     includeHTML('help.html')))



################


###Mathematics Score for Boys and Girls (1 = Boys) ---------------------------
pvs_PFS17 %>%
  dplyr::select(id,matches('^PV\\dMATH$'))%>% 
  merge(y = pes_PFS17, by = 'id', all.y = TRUE) %>%
  merge(y = dplyr::select(q_PFS17,id,Q04),
        by = 'id', 
        all.x = TRUE) %>%
  setNames(
    plyr::mapvalues(x = names(.),
                    from = c('W_FSTUWT', sprintf('W_FSTURWT%d',1:80)), #nomes do PISA 2012 (pq são apenas 5 PVs)
                    to = c('W_FSTUWT', sprintf('W_FSTR%d',1:80)))
  )%>%  pisa.mean.pv(pvlabel = 'MATH',by = c('codescola','Q04'),data = .)%>%
  
  {.} -> esc_PFS17$MATH_SC_BG

pvs_PFS17 %>%
  dplyr::select(id,matches('^PV\\dMATH$'))%>% 
  merge(y = pes_PFS17, by = 'id', all.y = TRUE) %>%
  merge(y = dplyr::select(ind_PFS17,id,MATHEFF),
        by = 'id', 
        all.x = TRUE) %>%
  setNames(
    plyr::mapvalues(x = names(.),
                    from = c('W_FSTUWT', sprintf('W_FSTURWT%d',1:80)), #nomes do PISA 2012 (pq são apenas 5 PVs)
                    to = c('W_FSTUWT', sprintf('W_FSTR%d',1:80)))
  ) %>% 
  mutate(qua_MEFF = cut(MATHEFF,
                        breaks = quantile(MATHEFF, c(0,0.25,0.75,1),na.rm = TRUE) , #Separando por quartis
                        labels = c('Bottom_Quant','Mid','Top_Quant'), right = FALSE
  )
  ) %>%
  pisa.mean.pv(pvlabel = 'MATH',by = c('codescola','qua_MEFF'),data = .)%>%
  {.} -> esc_PFS17$MATH_SC_MEFF


##Mathematics levels ---------------------------
names(pvs_PFS17) <- plyr::mapvalues(names(pvs_PFS17), from = c(sprintf('MATHPV%d',1:5)), to = c(sprintf('PV%dMATH',1:5)))

pvs_PFS17 %>%
  dplyr::select(id,matches('^PV\\dMATH$'))%>% 
  merge(y = pes_PFS17, by = 'id', all.y = TRUE) %>%
  setNames(
    plyr::mapvalues(x = names(.),
                    from = c('W_FSTUWT', sprintf('W_FSTURWT%d',1:80)), 
                    to = c('W_FSTUWT', sprintf('W_FSTR%d',1:80)))
  )%>%
  pisa.ben.pv(pvlabel = 'MATH',cutoff = c(357.77,420.07,482.38,544.68,606.99,669.30),by = 'codescola',data = .)%>%
  {.} -> esc_PFS17$MATH_LV

#ESCS
##The mean score in reading of the students who represent the lowest 25% in terms of ESCS ---------------------

##Quantis para o ESCS ----------------------------
ind_PFS17 %>%
  dplyr::select(id,'ESCS') %>% 
  merge(y = pes_PFS17, by = 'id', all.y = TRUE) %>%
  group_by(codescola) %>%
  summarize(bot25 = quantile(ESCS,probs = 0.25),top25 = quantile(ESCS,probs = 0.75)) %>%
  data.frame(stringsAsFactors = FALSE) %>%
  split(f = .$codescola) %>%
  {.} -> quantis_ESCS


ind_PFS17 %>%
  dplyr::select(id,'ESCS') %>% 
  merge(y = pes_PFS17, by = 'id', all.y = TRUE) %>%
  split(f = .$codescola) %>%
  mapply(FUN = function(x,y){ y %>%
      mutate(bot_ESCS = cut(ESCS,
                            breaks = c(-Inf,x[,'bot25',drop = TRUE],Inf),
                            labels = c('Bottom_25',"Above_25")),
             top_ESCS = cut(ESCS,
                            breaks = c(-Inf,x[,'top25',drop = TRUE],Inf),
                            labels = c('Below_25',"Top_25"))
      )
  },quantis_ESCS,.,SIMPLIFY = FALSE)%>%
  bind_rows() %>%
  merge(y = pvs_PFS17, by = 'id', all.x = TRUE) %>%
  setNames(
    plyr::mapvalues(x = names(.),
                    from = c('W_FSTUWT', sprintf('W_FSTURWT%d',1:80)), 
                    to = c('W_FSTUWT', sprintf('W_FSTR%d',1:80)))
  ) %>%
  pisa.mean.pv(pvlabel = 'READ',by = c('codescola','bot_ESCS'))%>%
  filter(bot_ESCS == 'Bottom_25') %>%
  dplyr::select(codescola,Mean,s.e.) %>%
  setNames(c('codescola','top_escs_read','top_escs_read_se')) %>%
  {.} -> esc_PFS17$ESCS_bot_mean_READ

