shinyApp(ui = ui2, server = server2)
source("Validation_Functions.R")
shinyApp(ui = ui2, server = server2)
# VS_shell.R
# Bonaventura Pacileo
# This program cleans the space, loads the required packages  and shell calls all the others
#clean the environment
rm(list=ls())
#checking wd
wd<-getwd() #'//main.oecd.org/ASgenEDU/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Validation Study/PBTS-VS'
#libraries
library("magrittr")
library("ggrepel") #loads ggplot2
library("RColorBrewer")
library("scales")
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
loading
gold.data <- read.table("V:/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Validation Study/PBTS-VS/data/Japan/gold.data.txt", header=T, sep="\t")
#raw.data <- read.table("V:/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Data/Andorra/raw.data.txt", header=T, sep="\t")
score.data <- read.table("V:/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Validation Study/PBTS-VS/data/Japan/score.data.txt", header=T, sep="\t")
#gold.data <- read.table("V:/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Data/Andorra/gold.data.txt", header=T, sep="\t")
#getting international parameters (for now slopes Are all fixed to 1)
IntlPars("read","diff") %>%
AnchorValues("read", score.data = resp, item.data = ., irtpar = "diff") %>%
data.matrix(.) -> xsi.fixed
IntlPars("read","diff") %>%
AnchorValues("read", score.data = score.data, item.data = ., irtpar = "diff") %>%
data.matrix(.) -> xsi.fixed
xsi.fixed %>% head9
xsi.fixed %>% head()
#getting international parameters (for now slopes Are all fixed to 1)
IntlPars("math","diff") %>%
AnchorValues("math", score.data = score.data, item.data = ., irtpar = "diff") %>%
data.matrix(.) -> xsi.fixed
xsi.fixed %>% head()
#getting international parameters (for now slopes Are all fixed to 1)
IntlPars("read","diff") %>%
AnchorValues("read", score.data = score.data, item.data = ., irtpar = "diff") %>%
data.matrix(.) -> xsi.fixed
IntlPars("read","slope") %>%
AnchorValues(domn="read", score.data = resp, item.data = ., irtpar = "slope") %>%
data.matrix(.) -> B
#dim input for tam.mml
dim(B)[3] <- 1
# 2PL TAM model with free difficulty parameters and fixed slopes = 1PL model
score.data %>%
dplyr::select(., dplyr::matches("^PR")) %>%
TAM::tam.mml(., xsi.fixed = xsi.fixed, B = B, irtmodel="2PL", control=list(maxiter = 500)) -> tam.input
#getting international parameters (for now slopes Are all fixed to 1)
IntlPars("read","diff") %>%
AnchorValues("read", score.data = score.data, item.data = ., irtpar = "diff") %>%
data.matrix(.) -> xsi.fixed
IntlPars("read","slope") %>%
AnchorValues(domn="read", score.data = score.data, item.data = ., irtpar = "slope") %>%
data.matrix(.) -> B
#dim input for tam.mml
dim(B)[3] <- 1
# 2PL TAM model with free difficulty parameters and fixed slopes = 1PL model
score.data %>%
dplyr::select(., dplyr::matches("^PR")) %>%
TAM::tam.mml(., xsi.fixed = xsi.fixed, B = B, irtmodel="2PL", control=list(maxiter = 500)) -> tam.input
tam.input %>%
TAM::tam.fit(.) -> fit.data
fit.data[[1]] %>% as.data.frame(.) -> fit.output
fit.output %>% head()
getting international parameters (for now slopes Are all fixed to 1)
IntlPars("math","diff") %>%
AnchorValues("math", score.data = score.data, item.data = ., irtpar = "diff") %>%
data.matrix(.) -> xsi.fixed
IntlPars("math","slope") %>%
AnchorValues(domn="math", score.data = score.data, item.data = ., irtpar = "slope") %>%
data.matrix(.) -> B
#dim input for tam.mml
dim(B)[3] <- 1
# 2PL TAM model with free difficulty parameters and fixed slopes = 1PL model
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
TAM::tam.mml(., xsi.fixed = xsi.fixed, B = B, irtmodel="2PL", control=list(maxiter = 500)) -> tam.input
tam.input %>%
TAM::tam.fit(.) -> fit.data
fit.data[[1]] %>% as.data.frame(.) -> fit.output
fit.output %>% head()
fit.output %<>% dplyr::rename(., fit.output.Infit=Infit, fit.output.Infit_t=Infit_t)
fit.output %>% head()
infit_table<-Infit(fit.output)
fit.output %<>% dplyr::rename(., fit.output.Infit=Infit, fit.output.Infit_t=Infit_t, fit.output.parameter=parameter)
infit_table<-Infit(fit.output)
fit.data[[1]] %>% as.data.frame(.) -> fit.output
fit.output %<>% dplyr::rename(., fit.output.Infit=Infit, fit.output.Infit_t=Infit_t, fit.output.parameter=parameter)
infit_table<-Infit(fit.output)
infit_table %>% head()
fit.output %>% head()
qnorm(0.975)
infit_table %>% head()
abs(fit.output$fit.output.Infit_t)
Infit<- function(tam.fit) {
tam.fit %>%
dplyr::mutate(., w.mnsq = dplyr::if_else(fit.output.Infit > 1.2 && abs(fit.output.Infit_t)>= qnorm(0.975), 1,
dplyr::if_else(fit.output.Infit < 0.8 && abs(fit.output.Infit_t)>= qnorm(0.975), -1, 0))) %>%
# dplyr::select(., fit.output.parameter, fit.output.Infit,w.mnsq) %>%
dplyr::rename(., item=fit.output.parameter,	Infit = fit.output.Infit)-> table5.output
table5.output %>%
return(.)
}
fit.data[[1]] %>% as.data.frame(.) -> fit.output
fit.output %<>% dplyr::rename(., fit.output.Infit=Infit, fit.output.Infit_t=Infit_t, fit.output.parameter=parameter)
infit_table<-Infit(fit.output)
infit_table %>% head()
Infit<- function(tam.fit) {
tam.fit %>%
dplyr::mutate(., w.mnsq = dplyr::if_else(fit.output.Infit > 1.2 && fit.output.Infit_t>= qnorm(0.975), 1,
dplyr::if_else(fit.output.Infit < 0.8 && fit.output.Infit_t >= qnorm(0.975), -1, 0))) %>%
# dplyr::select(., fit.output.parameter, fit.output.Infit,w.mnsq) %>%
dplyr::rename(., item=fit.output.parameter,	Infit = fit.output.Infit)-> table5.output
table5.output %>%
return(.)
}
fit.data[[1]] %>% as.data.frame(.) -> fit.output
fit.output %<>% dplyr::rename(., fit.output.Infit=Infit, fit.output.Infit_t=Infit_t, fit.output.parameter=parameter)
infit_table<-Infit(fit.output)
head(infit_table)
Infit<- function(tam.fit) {
tam.fit %>%
dplyr::mutate(., w.mnsq = dplyr::if_else(fit.output.Infit > 1.2 && abs(fit.output.Infit_t)>= qnorm(0.975), 1,
dplyr::if_else(fit.output.Infit < 0.8 && abs(fit.output.Infit_t)>= qnorm(0.975), -1, 0))) %>%
dplyr::select(., fit.output.parameter, fit.output.Infit,w.mnsq) %>%
dplyr::rename(., item=fit.output.parameter,	Infit = fit.output.Infit)-> table5.output
table5.output %>%
return(.)
}
Infit<- function(tam.fit) {
tam.fit %>%
dplyr::mutate(., w.mnsq = dplyr::if_else(fit.output.Infit > 1.2 & abs(fit.output.Infit_t)>= qnorm(0.975), 1,
dplyr::if_else(fit.output.Infit < 0.8 & abs(fit.output.Infit_t)>= qnorm(0.975), -1, 0))) %>%
dplyr::select(., fit.output.parameter, fit.output.Infit,w.mnsq) %>%
dplyr::rename(., item=fit.output.parameter,	Infit = fit.output.Infit)-> table5.output
table5.output %>%
return(.)
}
fit.data[[1]] %>% as.data.frame(.) -> fit.output
fit.output %<>% dplyr::rename(., fit.output.Infit=Infit, fit.output.Infit_t=Infit_t, fit.output.parameter=parameter)
infit_table<-Infit(fit.output)
head(infit_table)
# VS_shell.R
# Bonaventura Pacileo
# This program cleans the space, loads the required packages  and shell calls all the others
#clean the environment
rm(list=ls())
#checking wd
wd<-getwd() #'//main.oecd.org/ASgenEDU/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Validation Study/PBTS-VS'
#libraries
library("magrittr")
library("ggrepel") #loads ggplot2
library("RColorBrewer")
library("scales")
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
# plausible values
tam.input %>%
TAM::tam.pv(.,nplausible=5) -> pv.input
# 2PL TAM model with free difficulty parameters and fixed slopes = 1PL model
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
TAM::tam.mml(., xsi.fixed = xsi.fixed, B = B, irtmodel="2PL", control=list(maxiter = 500)) -> tam.input
score.data <- read.table("V:/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Validation Study/PBTS-VS/data/Japan/score.data.txt", header=T, sep="\t")
#getting international parameters (for now slopes Are all fixed to 1)
IntlPars("math","diff") %>%
AnchorValues("math", score.data = score.data, item.data = ., irtpar = "diff") %>%
data.matrix(.) -> xsi.fixed
IntlPars("math","slope") %>%
AnchorValues(domn="math", score.data = score.data, item.data = ., irtpar = "slope") %>%
data.matrix(.) -> B
#dim input for tam.mml
dim(B)[3] <- 1
# 2PL TAM model with free difficulty parameters and fixed slopes = 1PL model
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
TAM::tam.mml(., xsi.fixed = xsi.fixed, B = B, irtmodel="2PL", control=list(maxiter = 500)) -> tam.input
tam.input %>%
TAM::tam.fit(.) -> fit.data
fit.data[[1]] %>% as.data.frame(.) -> fit.output
fit.output %<>% dplyr::rename(., fit.output.Infit=Infit, fit.output.Infit_t=Infit_t, fit.output.parameter=parameter)
infit_table<-Infit(fit.output)
# plausible values
tam.input %>%
TAM::tam.pv(.,nplausible=5) -> pv.input
# rel freq, pt biserial correlation
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
TAM::tam.ctt(., pvscores = pv.input$pv,  group=NULL , progress=TRUE) -> ctt.output
ctt.output %>% head()
pt_bis<-PtBis(ctt.output)
discrim<-function (x)
{
x <- na.exclude(as.matrix(x))
k <- ncol(x)
N <- nrow(x)
ni <- as.integer(N/3)
TOT <- apply(x, 1, mean)
tmpx <- cbind(x, TOT)[order(TOT), ]
tmpxU <- tmpx[(N + 1 - ni):N, ]
tmpxL <- tmpx[1:ni, ]
Ui <- apply(tmpxU, 2, sum)
Li <- apply(tmpxL, 2, sum)
discrim <- (Ui - Li)/ni
return(discrim[1:k])
}
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>% discrim(.)->a
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>% discrim(.)->a
ctt.output %>% head()
pv.input$theta
pv.input$theta %>% head()
pv.input$pv %>% head()
?TAM::tam.wle
tam.input %>%
TAM::tam.wle(.)->wle.output
?dplyr::summarize_at
?t
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
dplyr::summarize_at(vars(dplyr::matches('^P\\w\\d{4}Q.*$')),function(x){stats::cor(x,wle.output$PersonScores,use = 'complete.obs')}) %>%
t() %>%
data.frame() %>%
setNames('Disc') %>%
cbind(item = row.names(.)) ->a
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
dplyr::summarize_at(dplyr::vars(dplyr::matches('^P\\w\\d{4}Q.*$')),function(x){stats::cor(x,wle.output$PersonScores,use = 'complete.obs')}) %>%
t() %>%
data.frame() %>%
setNames('Disc') %>%
cbind(item = row.names(.)) ->a
a %>% head()
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
dplyr::summarize_at(dplyr::vars(dplyr::matches('^P\\w\\d{4}Q.*$')),function(x){stats::cor(x,wle.output$PersonScores,use = 'complete.obs')}) %>%
t() %>%
data.frame(disc=.,item = row.names(.))  ->a
a %>% head()
ctt.output %>% head()
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
dplyr::summarize_at(dplyr::vars(dplyr::matches('^P\\w\\d{4}Q.*$')),function(x){stats::cor(x,wle.output$PersonScores,use = 'complete.obs')}) ->b
head(b)
score.data <- read.table("V:/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Data/Andorra/score.data.txt", header=T, sep="\t")
#getting international parameters (for now slopes Are all fixed to 1)
IntlPars("math","diff") %>%
AnchorValues("math", score.data = score.data, item.data = ., irtpar = "diff") %>%
data.matrix(.) -> xsi.fixed
IntlPars("math","slope") %>%
AnchorValues(domn="math", score.data = score.data, item.data = ., irtpar = "slope") %>%
data.matrix(.) -> B
#dim input for tam.mml
dim(B)[3] <- 1
# 2PL TAM model with free difficulty parameters and fixed slopes = 1PL model
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
TAM::tam.mml(., xsi.fixed = xsi.fixed, B = B, irtmodel="2PL", control=list(maxiter = 500)) -> tam.input
tam.input %>%
TAM::tam.fit(.) -> fit.data
fit.data[[1]] %>% as.data.frame(.) -> fit.output
fit.output %<>% dplyr::rename(., fit.output.Infit=Infit, fit.output.Infit_t=Infit_t, fit.output.parameter=parameter)
infit_table<-Infit(fit.output)
#wle estimates
tam.input %>%
TAM::tam.wle(.)->wle.output
# plausible values
tam.input %>%
TAM::tam.pv(.,nplausible=5) -> pv.input
# rel freq, pt biserial correlation
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
TAM::tam.ctt(., pvscores = pv.input$pv,  group=NULL , progress=TRUE) -> ctt.output
discrim<-function (x)
{
x <- na.exclude(as.matrix(x))
k <- ncol(x)
N <- nrow(x)
ni <- as.integer(N/3)
TOT <- apply(x, 1, mean)
tmpx <- cbind(x, TOT)[order(TOT), ]
tmpxU <- tmpx[(N + 1 - ni):N, ]
tmpxL <- tmpx[1:ni, ]
Ui <- apply(tmpxU, 2, sum)
Li <- apply(tmpxL, 2, sum)
discrim <- (Ui - Li)/ni
return(discrim[1:k])
}
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
dplyr::summarize_at(dplyr::vars(dplyr::matches('^P\\w\\d{4}Q.*$')),function(x){stats::cor(x,wle.output$PersonScores,use = 'complete.obs')}) %>%
t() %>%
data.frame(disc=.,item = row.names(.))  ->a
a %>% head()
ctt.output %>% head()
a %>% View()
score.data %>%
dplyr::select(., dplyr::matches("^PM")) ->x
x <- na.exclude(as.matrix(x))
head(x)
x
View(x)
k <- ncol(x)
N <- nrow(x)
ni <- as.integer(N/3)
TOT <- apply(x, 1, mean)
tmpx <- cbind(x, TOT)[order(TOT), ]
tmpxU <- tmpx[(N + 1 - ni):N, ]
tmpxL <- tmpx[1:ni, ]
Ui <- apply(tmpxU, 2, sum)
Li <- apply(tmpxL, 2, sum)
discrim <- (Ui - Li)/ni
score.data %>%
dplyr::select(., dplyr::matches("^PM")) ->x
k <- ncol(x)
N <- nrow(x)
ni <- as.integer(N/3)
TOT <- apply(x, 1, mean)
tmpx <- cbind(x, TOT)[order(TOT), ]
tmpxU <- tmpx[(N + 1 - ni):N, ]
tmpxL <- tmpx[1:ni, ]
Ui <- apply(tmpxU, 2, sum)
Li <- apply(tmpxL, 2, sum)
discrim <- (Ui - Li)/ni
discrim[1:k]
k
N
ni
TOT
TOT <- apply(x,1,function(x){mean(x[!is.na(x)])})
TOT
tmpx <- cbind(x, TOT)[order(TOT), ]
tmpxU <- tmpx[(N + 1 - ni):N, ]
tmpxL <- tmpx[1:ni, ]
Ui <- apply(tmpxU, 2, sum)
Li <- apply(tmpxL, 2, sum)
Ui
TOT <- apply(x,1,function(x){mean(x[!is.na(x)])})
tmpx <- cbind(x, TOT)[order(TOT), ]
tmpxU <- tmpx[(N + 1 - ni):N, ]
tmpxL <- tmpx[1:ni, ]
Ui <- apply(tmpxU, 2, function(x){sum(x[!is.na(x)])})
Li <- apply(tmpxL, 2, function(x){sum(x[!is.na(x)])})
discrim <- (Ui - Li)/ni
discrim
discrim[1:k]
tmpx
head(tmpx)
head(Ui)
head(Li)
head(discrim)
ctt.output %>% head()
summarise(discrim)
summary(discrim)
discrim2<-if(discrim<0.2)
discrim[discrim<0.2]
discrim[discrim>0.2]
discrim[discrim>0.1]
a$disc[a$disc>0.2]
ctt.output$rpb.WLE
score.data %>%
dplyr::select(., dplyr::matches("^PM")) %>%
TAM::tam.ctt(., pvscores = pv.input$pv, wlescore = wle.output$PersonScores,  group=NULL , progress=TRUE) -> ctt.output
ctt.output$rpb.WLE
ctt.output$rpb.PV
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
??render
?markdown::render
?rmarkdown::render
?normalizePath
a<-normalizePath("a")
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
library(tinytex)
VSshiny
tempReport <- file.path(tempdir(), "report.Rmd")
tempReport
file.copy("report.Rmd", tempReport, overwrite = TRUE)
VSshiny
# VS_shell.R
# Bonaventura Pacileo
# This program cleans the space, loads the required packages  and shell calls all the others
#clean the environment
rm(list=ls())
#checking wd
wd<-getwd() #'//main.oecd.org/ASgenEDU/PISA/BACKUP/PISA/PISA for Schools/11. Item Parameters/Validation Study/PBTS-VS'
#libraries
library("magrittr")
library("ggrepel") #loads ggplot2
library("RColorBrewer")
library("scales")
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
VSshiny
VSshiny
VSshiny
filename <- function() {
paste('my-report', sep = '.', switch(
input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'
))
}
filename()
VSshiny
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
library("pdflatex")
pdflatex -v
VSshiny
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
source(paste(wd,'src/config', 'VS_techfuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_tablefuns.R', sep="/"))
source(paste(wd,'src/config', 'VS_analysisfuns.R', sep="/"))
source(paste(wd,'src/dashboard', 'VS_ui.R',sep="/"))
source(paste(wd,'src/dashboard', 'VS_server.R',sep="/"))
shiny::shinyApp(ui = ui, server = server)-> VSshiny
VSshiny
